## initiating
from subprocess import Popen, PIPE
import chestnut.arduino

stdout = Popen('dmesg | grep -v disconnect | grep -Eo "tty(ACM|USB)." | tail -1', shell=True, stdout=PIPE).stdout
output = stdout.read()  # Output in binary form'
#print (output)
encoding = 'utf-8'     
port = str(output, encoding) #encoding to str
port_str = '/dev/' + port    # build the dev from Linux
port = port_str.split('\n')[0] # remove a \n inside the string
print (port)


chestnut.arduino.flash_firmata(board='uno', port= port, debug=True) # port from Linux

## Import required libraries
import time
import pyfirmata                          # refer: "https://pyfirmata.readthedocs.io/en/latest/"
from pyfirmata import Arduino
from pyfirmata import Arduino,util
import Adafruit_DHT as TDS
#import Adafruit_CharLCD as LCD
from Adafruit_CharLCD import Adafruit_CharLCD
import smbus
import requests
import urllib.request
from urllib.request import urlopen
import thingspeak

## Initialize the Input Output pins of Arduino and Raspberry Pi boards
boardArduino = Arduino(port)

## Thingspeak Inputs
channel_id    = 2016830 
write_key     = 'G1CJYJXP2FXGK9HM'
channel       = thingspeak.Channel(id=channel_id, api_key=write_key)

#url = 'https://api.thingspeak.com/update'
#headers = { 'content-type':'application/json' }

## Sensor Inputs #######
GTLpin = 0        # Ground Tank Water Level Analog Pin number
TTLpin = 1        # Terrace Tank Water Level Analog Pin number
TDSpin = 2        # Water TDS meter Analog Pin number
GWSpin = 3        # Switch indicating the Govt water supply Digital Pin number

# analog input from Ground Tank Water Level
boardArduino.analog[GTLpin].enable_reporting()
# analog input from Terrace Tank Water Level
boardArduino.analog[TTLpin].enable_reporting()
# analog input from Water TDS meter
boardArduino.analog[TDSpin].enable_reporting()
# Digital Input from Switch indicating the Govt water supply
switchGWS = boardArduino.digital[GWSpin] 
switchGWS.mode = pyfirmata.INPUT

## Actuator Outputs ######
# LCD display if required
lcd = Adafruit_CharLCD (rs=26, en=19, d4=25, d5=24, d6=22, d7=27, cols=16, lines=2)
lcd.clear()
# Motor Pin numbers
GMpin = 12        # Ground Water Tank Motor Digital Pin number
TMpin = 13        # Terrace Water Tank Motor Digital Pin number
# LED Pin numbers
LEDredpin   = 7   # TDS water quality bad LED Digital Pin number
LEDgreenpin = 8   # TDS water quality good LED Digital Pin number
# BUZZER Pin number
BuzzerPin   = 4   # TDS water quality bad BUZZER Digital Pin number, will sound if water quality is bad

# Iterator required for data collection from input pins
util.Iterator(boardArduino).start()

## variables
sleepTime     = 0.2 ## milli secs

statusGovtWaterSupply    = False      ## sensor of govt supply
statusTerraceTankLevel   = False      ## sensor of upper tank water level, False means LOW and True means HIGH
statusGroundTankLevel    = False      ##  sensor of lower ground water tank level, False means LOW and True means HIGH
statusGroundWaterTDS     = False      ## sensor of water TDS, False means BAD and True means GOOD for water quality

AllInputsValid           = True       ## if all inputs give valid values

GTLpercent    = 0                     ## Ground Tank Water level in percentage
TTLpercent    = 0                     ## Terrace Tank Water level in percentage
GTMstatus     = 0                     ## Ground Tank Motor status , 1 is ON 0 is OFF
TTMstatus     = 0                     ## Terrace Tank Motor status , 1 is ON 0 is OFF
TDSstatus     = 0                     ## Ground Water Quality status , 1 is OK 0 is BAD

## ## statusLCDdisplay      = 'Okay'    ## not required delete later

time.sleep(sleepTime)

## Run the infinite loop, inside which, 
## each iteration collect data from input pins and write data to output pins as per requirement

while True:
    
    print('Collect Data')
  # Collect Data From Input Pins
    GTLpin_value  = boardArduino.analog[GTLpin].read()
    TTLpin_value  = boardArduino.analog[TTLpin].read()
    TDSpin_value  = boardArduino.analog[TDSpin].read()

    statusGovtWaterSupply  = switchGWS.read()
    time.sleep(sleepTime)
  
    print(GTLpin_value)
    print(TTLpin_value)
    print(TDSpin_value)
    print(statusGovtWaterSupply)

  # check if all inputs are valid i.e. no None values
    if GTLpin_value != None and TTLpin_value != None and TDSpin_value != None and statusGovtWaterSupply != None:
        AllInputsValid = True
    else:
        AllInputsValid = False
  #

  ### If inputs are valid, further process
    if AllInputsValid:
        statusGroundTankLevel  = ( float(GTLpin_value) ) > 0.2  # transformation and threshold from practical usage of level sensor
        statusTerraceTankLevel = ( float(TTLpin_value) ) > 0.2  # transformation and threshold from practical usage of level sensor
        statusGroundWaterTDS   = ( float(TDSpin_value) ) < 0.3   # transformation and threshold from practical usage of TDS sensor
        GTLpercent             = round( float(GTLpin_value), 2)  ## percentage of Ground Tank Level upto 2 decimal points
        TTLpercent             = round( float(TTLpin_value), 2)  ## percentage of Ground Tank Level upto 2 decimal points



        ######### sensor actuator logic for TDS meter
    if statusGroundWaterTDS == True:# if water quality is good
        lcd.message('Ground water quality is GOOD')  # if LCD is used
        boardArduino.digital[BuzzerPin].write(0)     # buzzer should be OFF if water is good
        boardArduino.digital[LEDgreenpin].write(1)   # green should glow if water is good
        boardArduino.digital[LEDredpin].write(0)     # if red is glowing it will stop
        print('Ground water quality is GOOD')
        TDSstatus    = 1
    else:                            # if water quality is bad
        lcd.message('Ground water quality is BAD')   # if LCD is used
        boardArduino.digital[BuzzerPin].write(1)     # buzzer should be ON if water is bad
        boardArduino.digital[LEDredpin].write(1)     # red should glow if water is good
        boardArduino.digital[LEDgreenpin].write(0)   # if green is glowing it will stop
        print('Ground water quality is BAD')
        TDSstatus   = 0
    #

    ######### sensor actuator logic for ground water motor pump
    if statusGroundTankLevel == False:             # if ground water tank level is low
        boardArduino.digital[GMpin].write(1)         # turn on ground motor if level is low.. 
        print('Ground motor ON')
        GTMstatus   = 1
    else:                                          # if ground water tank level is high
        boardArduino.digital[GMpin].write(0)         # turn off ground motor if level is high..
        print('Ground motor OFF')
        GTMstatus   = 0
    #

    ######### sensor actuator logic for terrace water motor pump
    # process for terrace motor only if govt water supply is not available
    if statusGovtWaterSupply == True:              # if Govt Water Supply is available
        print('Government Water Supply is ON')
    else:                                          # if Govt Water Supply is not available
        print('Government Water Supply is OFF')

    if statusTerraceTankLevel == False:          # if terrace water tank level is low
        boardArduino.digital[TMpin].write(1)       # turn on terrace motor if level is low.. 
        print('Terrace motor ON')
        TTMstatus   = 1
    else:                                        # if terrace water tank level is high
        boardArduino.digital[TMpin].write(0)       # turn off terrace motor if level is high..
        print('Terrace motor OFF')
        TTMstatus   = 0
    #

    ### ADD CODE FOR DATA UPDATE TO CLOUD
    # inputs: GTLpercent, TTLpercent, GTMstatus, TTMstatus, TDSstatus
    # try:
      # write
    response = channel.update({'field1': GTLpercent, 'field2': TTLpercent, 'field3': TDSstatus, 'field4': GTMstatus, 'field5': TTMstatus})
    ##parameters = { 'api_key':'G1CJYJXP2FXGK9HM', 'field1':30.12, 'field2': 40.56, 'field3': 0, 'field4': 0, 'field5': 1 }
    #parameters = { 'api_key':'G1CJYJXP2FXGK9HM', 'field1': GTLpercent, 'field2': TTLpercent, 'field3': TDSstatus, 'field4': GTMstatus, 'field5': TTMstatus }
    #response = requests.get(url, params = parameters)

    # except:
    #   print("connection failed")
    ###

  # end if AllInputsValid

    time.sleep(5*sleepTime)
## end while loop
